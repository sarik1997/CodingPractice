/**Low-Level Design (LLD) for Uber**

        ---

        ## **1. Requirements**

        ### **Functional Requirements**
        ✔ User registration, login, and authentication
        ✔ Booking a ride
        ✔ Searching for nearby drivers
        ✔ Real-time tracking of rides
        ✔ Fare calculation
        ✔ Payment processing
        ✔ Ride history for users and drivers
        ✔ Ratings and reviews for rides

        ### **Non-Functional Requirements**
        ✔ Scalable and highly available
        ✔ Low-latency responses
        ✔ Secure payment processing
        ✔ Efficient route and pricing algorithms
        ✔ Real-time notifications

        ---

        ## **2. Identifying Key Entities and Classes**

        ### **Main Entities:**
        - `User`
        - `Driver`
        - `Ride`
        - `Vehicle`
        - `Location`
        - `Payment`
        - `Rating`

        ### **Class Diagram (Conceptual)**
        ```
        User
        ├── String userId
        ├── String name
        ├── List<Ride> rideHistory
        ├── requestRide(Location pickup, Location dropoff)

        Driver
        ├── String driverId
        ├── String name
        ├── Vehicle vehicle
        ├── boolean isAvailable
        ├── List<Ride> rideHistory
        ├── acceptRide(Ride ride)

        Vehicle
        ├── String vehicleId
        ├── String model
        ├── String licensePlate
        ├── int capacity

        Ride
        ├── String rideId
        ├── String userId
        ├── String driverId
        ├── Location pickupLocation
        ├── Location dropoffLocation
        ├── double fare
        ├── RideStatus status

        Location
        ├── double latitude
        ├── double longitude

        Payment
        ├── String paymentId
        ├── double amount
        ├── boolean status

        Rating
        ├── String ratingId
        ├── String userId
        ├── String driverId
        ├── int score
**/

//*1️⃣ User and Driver
import java.util.List;
import java.util.UUID;

class User {
    private String userId;
    private String name;
    private List<Ride> rideHistory;

    public User(String userId, String name) {
        this.userId = userId;
        this.name = name;
    }

    public Ride requestRide(Location pickup, Location dropoff) {
        return new Ride(this.userId, pickup, dropoff);
    }
}

class Driver {
    private String driverId;
    private String name;
    private Vehicle vehicle;
    private boolean isAvailable;
    private List<Ride> rideHistory;

    public void acceptRide(Ride ride) {
        this.isAvailable = false;
        ride.assignDriver(this.driverId);
    }
}

//**2️⃣ Ride and Vehicle

class Ride {
    private String rideId;
    private String userId;
    private String driverId;
    private Location pickupLocation;
    private Location dropoffLocation;
    private double fare;
    private String status;

    public Ride(String userId, Location pickup, Location dropoff) {
        this.rideId = UUID.randomUUID().toString();
        this.userId = userId;
        this.pickupLocation = pickup;
        this.dropoffLocation = dropoff;
        this.status = "REQUESTED";
    }

    public void assignDriver(String driverId) {
        this.driverId = driverId;
        this.status = "ASSIGNED";
    }
}

class Vehicle {
    private String vehicleId;
    private String model;
    private String licensePlate;
    private int capacity;
}

//  **3️⃣ Location and Payment
class Location {
    private double latitude;
    private double longitude;

    public Location(double latitude, double longitude) {
        this.latitude = latitude;
        this.longitude = longitude;
    }
}

class Payment {
    private String paymentId;
    private double amount;
    private boolean status;

    public Payment(String paymentId, double amount, boolean status) {
        this.paymentId = paymentId;
        this.amount = amount;
        this.status = status;
    }
}

     /**   ## **4. Enhancements & Optimizations**
        ✔ **Use a database** instead of in-memory lists for scalability
✔ **Implement caching** for frequently accessed data
✔ **Optimize ride matching** using geospatial indexing
✔ **Integrate third-party payment gateways** for secure transactions
✔ **Introduce surge pricing** for peak hours
✔ **Implement fraud detection** to prevent fake rides
**/

