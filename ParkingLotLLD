import java.time.LocalDateTime;
import java.util.List;

/**
Low-Level Design (LLD) for a Parking Lot System**
 1. Requirements
    Functional Requirements**

        ✔ Support different types of vehicles (Car, Bike, Truck)\
        ✔ Multiple levels with parking spots of different sizes\
        ✔ Allocate and free up parking spots\
        ✔ Track parking tickets and payments

    Non-Functional Requirements**

        ✔ Scalable to support multiple parking lots\
        ✔ High availability\
        ✔ Efficient parking space allocation

 2. Identifying Key Entities and Classes**
    Main Entities:

        - `ParkingLot`
        - `ParkingLevel`
        - `ParkingSpot`
        - `Vehicle`
        - `Ticket`
        - `Payment`

 Class Diagram (Conceptual)
ParkingLot
  ├── List<ParkingLevel> levels
  ├── parkVehicle(Vehicle v)
  ├── removeVehicle(Ticket t)

ParkingLevel
  ├── int levelNumber
  ├── List<ParkingSpot> spots
  ├── findAvailableSpot(Vehicle v)

ParkingSpot
  ├── int spotId
  ├── boolean isOccupied
  ├── Vehicle vehicle
  ├── boolean canFitVehicle(Vehicle v)

Vehicle (Abstract)
  ├── String licensePlate
  ├── VehicleType type

Car (extends Vehicle)
Bike (extends Vehicle)
Truck (extends Vehicle)

Ticket
  ├── String ticketNumber
  ├── Vehicle vehicle
  ├── LocalDateTime entryTime
  ├── double calculateFee()

Payment
  ├── double amount
  ├── boolean pay()
```
 **/
enum VehicleType { CAR, BIKE, TRUCK; }

abstract class Vehicle {
    private String licensePlate;
    private VehicleType type;

    public Vehicle(String licensePlate, VehicleType type) {
        this.licensePlate = licensePlate;
        this.type = type;
    }

    public VehicleType getType() {
        return type;
    }
}

class Car extends Vehicle {
    public Car(String licensePlate) { super(licensePlate, VehicleType.CAR); }
}

class Bike extends Vehicle {
    public Bike(String licensePlate) { super(licensePlate, VehicleType.BIKE); }
}

class Truck extends Vehicle {
    public Truck(String licensePlate) { super(licensePlate, VehicleType.TRUCK); }
}

//ParkingSpot

class ParkingSpot {
    private int spotId;
    private boolean isOccupied;
    private Vehicle vehicle;
    private VehicleType spotSize;

    public ParkingSpot(int id, VehicleType spotSize) {
        this.spotId = id;
        this.spotSize = spotSize;
        this.isOccupied = false;
    }

    public boolean canFitVehicle(Vehicle v) {
        return !isOccupied && v.getType() == spotSize;
    }

    public void park(Vehicle v) {
        if (!canFitVehicle(v)) throw new IllegalStateException("Spot not available");
        this.vehicle = v;
        this.isOccupied = true;
    }

    public void removeVehicle() {
        this.vehicle = null;
        this.isOccupied = false;
    }
}

//Parking Level**
class ParkingLevel {
    private int levelNumber;
    private List<ParkingSpot> spots;

    public ParkingLevel(int levelNumber, List<ParkingSpot> spots) {
        this.levelNumber = levelNumber;
        this.spots = spots;
    }

    public ParkingSpot findAvailableSpot(Vehicle v) {
        for (ParkingSpot spot : spots) {
            if (spot.canFitVehicle(v)) {
                return spot;
            }
        }
        return null;
    }
}

//Parking Lot

class ParkingLot {
    private List<ParkingLevel> levels;

    public ParkingLot(List<ParkingLevel> levels) {
        this.levels = levels;
    }

    public Ticket parkVehicle(Vehicle vehicle) {
        for (ParkingLevel level : levels) {
            ParkingSpot spot = level.findAvailableSpot(vehicle);
            if (spot != null) {
                spot.park(vehicle);
                return new Ticket(vehicle);
            }
        }
        throw new IllegalStateException("No parking spot available");
    }

    public void removeVehicle(Ticket ticket) {
        ticket.getSpot().removeVehicle();
    }
}
//Ticket and Payment**


class Ticket {
    private static int counter = 1;
    private String ticketNumber;
    private Vehicle vehicle;
    private LocalDateTime entryTime;

    public Ticket(Vehicle vehicle) {
        this.ticketNumber = "TKT" + counter++;
        this.vehicle = vehicle;
        this.entryTime = LocalDateTime.now();
    }

    public double calculateFee() {
        long hoursParked = java.time.Duration.between(entryTime, LocalDateTime.now()).toHours();
        return hoursParked * 10; // Example: $10 per hour
    }
}

class Payment {
    private double amount;

    public Payment(double amount) {
        this.amount = amount;
    }

    public boolean pay() {
        System.out.println("Payment of $" + amount + " successful");
        return true;
    }
}
//
//        ## **4. Enhancements & Optimizations**
//
//        ✔ **Use a database** instead of in-memory lists for scalability\
//        ✔ **Implement different fee structures** (hourly/daily)\
//        ✔ **Add more vehicle types** (EV charging, handicap spots)\
//        ✔ **Introduce an Admin Dashboard** for real-time monitoring
//
//---
