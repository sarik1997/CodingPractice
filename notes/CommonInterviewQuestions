‚úÖ Java Features

üîπ Java 8 (LTS - 2014)
	‚Ä¢	Lambda Expressions: () -> {} ‚Äî functional programming.
	‚Ä¢	Streams API: Process collections using functional style.
	‚Ä¢	Functional Interfaces: Predicate, Function, etc.
	‚Ä¢	Default & Static methods in interfaces
	‚Ä¢	Optional: Avoid null checks.
	‚Ä¢	Method References: ClassName::methodName
	‚Ä¢	New Date & Time API: java.time.*

üîπ Java 11 (LTS - 2018)
	‚Ä¢	var for local variables (already in Java 10)
	‚Ä¢	String API improvements: isBlank(), lines(), strip()
	‚Ä¢	Files API: readString(), writeString()
	‚Ä¢	HTTP Client API: HttpClient, HttpRequest, etc.
	‚Ä¢	Removed Java EE modules: like JAXB, activation, etc.

üîπ Java 17 (LTS - 2021)
	‚Ä¢	Sealed Classes: Restrict which classes can extend a class.
	‚Ä¢	Pattern Matching for instanceof: if (obj instanceof String s)
	‚Ä¢	Records: Compact, immutable data carriers.
	‚Ä¢	Switch Enhancements: More expressive switch
	‚Ä¢	Text Blocks: """ multiline strings """

‚∏ª

üå± What is Spring?

Spring is a lightweight, open-source Java framework for building enterprise-level applications.
Core feature: Dependency Injection (IoC container)

‚∏ª

ü§î Why do we use Spring?
	‚Ä¢	Reduces boilerplate code
	‚Ä¢	Manages dependencies
	‚Ä¢	Integrates easily with databases, REST APIs, security, etc.
	‚Ä¢	Enables modular, testable code

‚∏ª

üÜö Spring vs Spring Boot
Feature                 Spring Framework                Spring Boot
Setup                   Manual, verbose                 Auto-configuration
Configuration           XML/Java-based                  Convention over configuration
Web server              External (Tomcat/Jetty)         Embedded (auto-configured)
Entry point             None                            @SpringBootApplication
Starter libs            Not available                   Provides starter dependencies

üõë Types of Exceptions in Java
	‚Ä¢	Checked Exceptions: Must be handled or declared (e.g., IOException, SQLException)
	‚Ä¢	Unchecked Exceptions: Runtime exceptions (e.g., NullPointerException, IndexOutOfBoundsException)
	‚Ä¢	Errors: Critical problems (e.g., OutOfMemoryError)

‚∏ª

üß≠ Exception Hierarchy in Java
Object
 ‚îî‚îÄ‚îÄ Throwable
      ‚îú‚îÄ‚îÄ Error
      ‚îî‚îÄ‚îÄ Exception
           ‚îú‚îÄ‚îÄ RuntimeException
           ‚îÇ    ‚îî‚îÄ‚îÄ NullPointerException, IllegalArgumentException...
           ‚îî‚îÄ‚îÄ IOException, SQLException, etc.


 üèó Design Patterns in Java

 Common Patterns:
 	‚Ä¢	Singleton: One instance per class
 	‚Ä¢	Factory: Create objects without exposing instantiation logic
 	‚Ä¢	Builder: Build complex objects step by step
 	‚Ä¢	Observer: Notify multiple objects of changes
 	‚Ä¢	Strategy: Select behavior at runtime

ü§ñ How Autowiring Works in Spring

Spring automatically injects a bean into a dependent class using annotations:
@Component
class Engine {}

@Component
class Car {
    @Autowired
    private Engine engine;
}

Types of autowiring:
	‚Ä¢	By Type
	‚Ä¢	By Name
	‚Ä¢	Constructor
	‚Ä¢	@Qualifier: Resolves multiple matching beans

‚∏ª

üîê What is Spring Security?

Spring Security is a framework for securing Java applications.

Core Features:
	‚Ä¢	Authentication: Who are you?
	‚Ä¢	Authorization: Are you allowed to access this?
	‚Ä¢	Password encoding
	‚Ä¢	Role-based access control
	‚Ä¢	OAuth2 / JWT / LDAP integration

Example
http
    .authorizeRequests()
    .antMatchers("/admin/**").hasRole("ADMIN")
    .anyRequest().authenticated()
    .and()
    .formLogin();



‚∏ª

‚úÖ How to Sort a Map (Java)
// Sort Map by keys
Map<String, Integer> map = new HashMap<>();
map.put("b", 2); map.put("a", 1); map.put("c", 3);

Map<String, Integer> sortedByKey = new TreeMap<>(map);

// Sort Map by values
map.entrySet()
   .stream()
   .sorted(Map.Entry.comparingByValue())
   .forEach(entry -> System.out.println(entry.getKey() + ": " + entry.getValue()));


‚úÖ Find Duplicate Strings in a List

  List<String> list = Arrays.asList("apple", "banana", "apple", "orange", "banana");

  Set<String> seen = new HashSet<>();
  Set<String> duplicates = list.stream()
      .filter(s -> !seen.add(s))
      .collect(Collectors.toSet());

  System.out.println(duplicates); // [apple, banana]

  ‚úÖ Palindrome Check in Java
  public static boolean isPalindrome(String str) {
      int left = 0, right = str.length() - 1;
      while (left < right) {
          if (str.charAt(left++) != str.charAt(right--)) return false;
      }
      return true;
  }

  ‚úÖ How to Find Server Crash Reasons
  	1.	Check logs: /var/log/syslog, /var/log/messages, application.log
  	2.	Look for OOM (Out of Memory) errors: dmesg | grep -i kill
  	3.	Use journalctl (Linux) for system-level failures.
  	4.	Application-specific tools (e.g., Spring Actuator, ELK)


‚úÖ REST vs SOAP

Feature         REST                    SOAP
Protocol        HTTP                    HTTP, SMTP, etc.
Format          JSON, XML               Only XML
Lightweight     Yes                     No (verbose)
Standards       None (more flexible)    Strict (WSDL)
Performance     Fast                    Slower


‚∏ª

‚úÖ Why J.P. Morgan? The work and pace might be different.

I‚Äôm excited about J.P. Morgan because it operates at the intersection of finance and technology.
The scale and complexity of its systems offer opportunities to work on challenging real-world problems that truly impact millions.
I‚Äôm aware that the work culture might differ from a typical product company ‚Äî
perhaps more structured or regulated ‚Äî but I actually appreciate that.
I see it as an opportunity to work in a mature engineering environment where stability,
 precision, and performance are critical. I‚Äôm confident I‚Äôll adapt quickly,
 and I‚Äôm eager to contribute to both new initiatives and the ongoing modernization efforts.

‚∏ª

‚úÖ A situation where I had a disagreement with my manager, how did I handle it?

In one project, I disagreed with my manager on whether to reuse an existing module or build a new one.
 He preferred reuse due to time constraints, but I felt it would introduce tech debt.
 Instead of pushing back directly, I collected evidence ‚Äî benchmarks, code review implications, and long-term maintainability.
 I presented it in a one-on-one, keeping the discussion solution-focused. Eventually, we aligned on a hybrid approach:
  reuse some parts, refactor others. The key was staying respectful,
   focusing on facts, and ensuring the shared goal ‚Äî delivering a stable, maintainable solution.

‚∏ª

‚úÖ Scenarios where I led a project

I led a backend refactoring project to modernize an outdated service layer used by multiple microservices.
I handled planning, coordinated with 3 developers, and worked with QA and DevOps to ensure seamless deployment.
I broke down work into sprints, set up a Slack channel for daily syncs, and created documentation for onboarding.
The refactor improved performance by 30% and reduced bug reports.
 This experience strengthened my skills in ownership, coordination, and proactive risk mitigation.

‚∏ª

‚úÖ Any initiative I have taken at work (on-call reduction, sessions, migration, etc.)

I noticed recurring on-call alerts due to outdated health checks and redundant retries.
 I analyzed logs, identified noisy endpoints, and proposed changes to alert thresholds and retry strategies.
  After implementing the changes, we reduced false alerts by ~40%.
I also initiated a weekly ‚ÄúTech 15‚Äù session where we shared short topics ‚Äî tools, debugging tricks, etc.
 This improved team collaboration and spread best practices organically.
Additionally, I led a successful migration from an Oracle DB to PostgreSQL for one service, ensuring compatibility, performance tuning, and zero-downtime rollout.

‚∏ª

‚úÖ How do I handle on-call?

I treat on-call as part of owning a system.
During on-call, I keep calm, follow structured troubleshooting,
and aim for quick mitigation before deep root-cause analysis.
I document fixes to build our knowledge base and identify patterns ‚Äî if something repeats,
I work on automation or fixing root causes post-incident. I also collaborate closely with devs/infra to improve monitoring and alerting.

‚∏ª

‚úÖ How do I behave when my design is rejected due to timeline or a senior dev‚Äôs alternate approach?

I remind myself that the goal is team success, not ego. If a design I propose is rejected,
 I listen carefully to the feedback. If it‚Äôs due to timelines,
  I look for ways to simplify or propose a phased approach.
  If a senior dev suggests something better, I try to learn from it.
  I may ask clarifying questions,
  but I never push back emotionally. Ultimately, good design is collaborative ‚Äî and being open to feedback helps me grow and builds trust within the team.
