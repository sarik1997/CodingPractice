/**Low-Level Design (LLD) for BookMyShow**
 **1. Requirements**

    **Functional Requirements**
        ✔ User registration, login, and authentication
        ✔ Browse movies, theaters, and show timings
        ✔ Book/cancel tickets
        ✔ Seat selection
        ✔ Payment processing
        ✔ Notifications for booking confirmation
        ✔ Reviews and ratings for movies
        ✔ Admin panel for theater management

        ### **Non-Functional Requirements**
        ✔ Scalable and highly available
        ✔ Secure payment processing
        ✔ Low latency for seat selection and booking
        ✔ Efficient data storage and retrieval

        ---

 **2. Identifying Key Entities and Classes**

        ### **Main Entities:**
        - `User`
        - `Movie`
        - `Theater`
        - `Screen`
        - `Show`
        - `Seat`
        - `Booking`
        - `Payment`

        ### **Class Diagram (Conceptual)**
        ```
        User
        ├── String userId
        ├── String name
        ├── List<Booking> bookings

        Movie
        ├── String movieId
        ├── String title
        ├── String genre
        ├── double rating

        Theater
        ├── String theaterId
        ├── String name
        ├── String location
        ├── List<Screen> screens

        Screen
        ├── String screenId
        ├── int totalSeats
        ├── List<Show> shows

        Show
        ├── String showId
        ├── String movieId
        ├── String screenId
        ├── DateTime showTime
        ├── List<Seat> availableSeats

        Seat
        ├── String seatId
        ├── boolean isBooked

        Booking
        ├── String bookingId
        ├── String userId
        ├── String showId
        ├── List<Seat> bookedSeats
        ├── Payment payment

        Payment
        ├── String paymentId
        ├── double amount
        ├── boolean status
**/
// **1️⃣ User
import java.time.LocalDateTime;
import java.util.List;

class Users {
    private String userId;
    private String name;
    private List<Booking> bookings;

    public Users(String userId, String name) {
        this.userId = userId;
        this.name = name;
    }
}

// **2️⃣ Movie and Theater
class Movie {
    private String movieId;
    private String title;
    private String genre;
    private double rating;

    public Movie(String movieId, String title, String genre, double rating) {
        this.movieId = movieId;
        this.title = title;
        this.genre = genre;
        this.rating = rating;
    }
}

class Theater {
    private String theaterId;
    private String name;
    private String location;
    private List<Screen> screens;

    public Theater(String theaterId, String name, String location) {
        this.theaterId = theaterId;
        this.name = name;
        this.location = location;
    }
}

//**3️⃣ Show and Seat
class Show {
    private String showId;
    private String movieId;
    private String screenId;
    private LocalDateTime showTime;
    private List<Seat> availableSeats;

    public Show(String showId, String movieId, String screenId, LocalDateTime showTime) {
        this.showId = showId;
        this.movieId = movieId;
        this.screenId = screenId;
        this.showTime = showTime;
    }
}

class Seat {
    private String seatId;
    private boolean isBooked;

    public Seat(String seatId) {
        this.seatId = seatId;
        this.isBooked = false;
    }
}

//**4️⃣ Booking and Payment
class Booking {
    private String bookingId;
    private String userId;
    private String showId;
    private List<Seat> bookedSeats;
    private Payment payment;

    public Booking(String bookingId, String userId, String showId, List<Seat> bookedSeats, Payment payment) {
        this.bookingId = bookingId;
        this.userId = userId;
        this.showId = showId;
        this.bookedSeats = bookedSeats;
        this.payment = payment;
    }
}

class Payment {
    private String paymentId;
    private double amount;
    private boolean status;

    public Payment(String paymentId, double amount, boolean status) {
        this.paymentId = paymentId;
        this.amount = amount;
        this.status = status;
    }
}

/** **4. Enhancements & Optimizations**
        ✔ **Use a database** to store bookings and user data
✔ **Implement caching** for frequently accessed movie details
✔ **Integrate a third-party payment gateway** for secure transactions
✔ **Implement seat-locking mechanism** to avoid double booking
✔ **Optimize search** for movies and theaters using Elasticsearch
✔ **Introduce rating and review system** for better recommendations
**/