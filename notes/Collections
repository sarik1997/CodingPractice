üß≠ Key Differences: HashMap vs TreeMap
Feature                             HashMap                                         TreeMap
Ordering                            ‚ùå No ordering (random or hash-based)           ‚úÖ Keys sorted in natural or custom order
Implementation                      Uses a hash table                               Uses a Red-Black tree (balanced BST)
Performance (get/put)               O(1) average time                               O(log n) time
Allows null key?                    ‚úÖ Yes, one null key                            ‚ùå No null key
Allows null values?                 ‚úÖ Yes                                          ‚úÖ Yes
Thread safety                       ‚ùå Not thread-safe                              ‚ùå Not thread-safe
Use case                            Fast lookups, unordered storage                 Sorted keys, range queries

Map<String, Integer> hashMap = new HashMap<>();
 hashMap.put("banana", 2);
 hashMap.put("apple", 5);
 hashMap.put("cherry", 3);
 System.out.println(hashMap); // Order not guaranteed

 Map<String, Integer> treeMap = new TreeMap<>();
 treeMap.put("banana", 2);
 treeMap.put("apple", 5);
 treeMap.put("cherry", 3);
 System.out.println(treeMap); // Output sorted by key

 üß† When to Use What:
 	Use HashMap when:
 	‚Ä¢	You want fast access and don‚Äôt care about order.
 	‚Ä¢	You need to store a null key.
 	Use TreeMap when:
 	‚Ä¢	You need the keys to be sorted automatically.
 	‚Ä¢	You want to do range queries like subMap(), headMap(), tailMap().

üß≠ Key Differences: Synchronized HashMap vs ConcurrentHashMap

Feature                                     Synchronized HashMap                                ConcurrentHashMap
How it is created                   Collections.synchronizedMap(new HashMap<>())            new ConcurrentHashMap<>()
Thread safety mechanism         Uses a single lock on the entire map (coarse-grained)       Uses fine-grained locks (segments or buckets)
Performance                     Slower under high concurrency due to full locking           Much faster under concurrent access
Null keys/values                ‚úÖ Allows 1 null key and multiple null values               ‚ùå Does not allow null keys or null values
Iteration safety                Must manually synchronize during iteration                  Iteration is weakly consistent (no ConcurrentModificationException)
Read operations                 Blocked if a write is in progress                           Read operations never block (non-locking reads)
Introduced in Java              Java 1.2 (via Collections framework)                        Java 1.5 (in java.util.concurrent)

üîß Code Comparison:

üîπ Synchronized HashMap:
Map<String, String> map = Collections.synchronizedMap(new HashMap<>());

synchronized (map) {
    for (String key : map.keySet()) {
        System.out.println(key + ": " + map.get(key));
    }
}
üîπ ConcurrentHashMap:
Map<String, String> map = new ConcurrentHashMap<>();

for (String key : map.keySet()) {
    System.out.println(key + ": " + map.get(key)); // No explicit sync needed
}
üß† When to Use:
Scenario                                        Recommended Map
Simple single-threaded code                     HashMap
Low concurrency, legacy code                    SynchronizedMap
High-performance, multi-threaded access         ‚úÖ ConcurrentHashMap


import java.util.HashMap;

public class MapExample {
    public static void main(String[] args) {
        HashMap<String, Integer> myMap = new HashMap<>();

        myMap.put("apple", 10);
        myMap.put("banana", 15);
        myMap.put("cherry", 20);
        myMap.put("apple", 30); // overwrite
        myMap.put("pineapple", myMap.get("apple")); // apple = 30

        System.out.println(myMap.size());
        System.out.println(myMap);
    }
}

‚∏ª

‚úÖ Q1: What will be the output?

Let‚Äôs analyze:
	‚Ä¢	"apple" is inserted with 10, then overwritten with 30.
	‚Ä¢	"pineapple" is added with value myMap.get("apple"), which is 30.

Final entries:
{
  "apple"     => 30,
  "banana"    => 15,
  "cherry"    => 20,
  "pineapple" => 30
}
Output:
4
{banana=15, cherry=20, apple=30, pineapple=30}

(Note: The order may vary because HashMap is not ordered.)

‚∏ª

‚úÖ Q2: Explain internal working of HashMap
	‚Ä¢	HashMap uses an array of buckets internally (each bucket is a linked list or tree in case of collisions).
	‚Ä¢	When you call put(key, value):
	1.	It computes the hashCode of the key.
	2.	Applies hash function to map hash to an index (bucket).
	3.	If the bucket is empty ‚Üí new node is added.
	4.	If a key exists (equal hash & equals()) ‚Üí value is updated.
	5.	If collision occurs (same index, different keys), new entry is chained (or treeified if large).

Java 8+ uses a TreeMap (Red-Black Tree) for buckets with >8 entries to improve performance.

‚∏ª

‚úÖ Q3: Is HashMap thread-safe?

No, HashMap is not thread-safe.
	‚Ä¢	If multiple threads access and modify a HashMap concurrently without synchronization, it may lead to data inconsistency or infinite loops (especially in Java 7).

For thread-safe usage:
	‚Ä¢	Use ConcurrentHashMap
	‚Ä¢	Or wrap with Collections.synchronizedMap(...) (less efficient)

‚∏ª

‚úÖ Q4: What is the initial bucket size of HashMap?
	‚Ä¢	The default initial capacity of a HashMap is 16 buckets.
	‚Ä¢	You can customize it using the constructor like: new HashMap<>(32).

‚∏ª

‚úÖ Q5: What is the load factor?
	‚Ä¢	Load Factor = how full the HashMap can get before it resizes.
	‚Ä¢	Default is 0.75 (75% full).
	‚Ä¢	When size >= capacity * loadFactor, the HashMap resizes (doubles).

So, default threshold before resizing:
threshold = 16 * 0.75 = 12 entries